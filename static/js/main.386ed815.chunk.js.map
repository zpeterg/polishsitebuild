{"version":3,"sources":["Polish.js","App.js","serviceWorker.js","index.js"],"names":["Section","styled","section","_templateObject","Button","button","_templateObject2","props","selected","Input","input","_templateObject3","InputText","span","_templateObject4","TextBox","textarea","_templateObject5","SeqWrap","div","_templateObject6","NuclWrap","_templateObject7","NuclItem","_templateObject8","children","Nucls","_templateObject9","Nucl","data","react_default","a","createElement","map","x","i","key","Polish","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","defaultState","step","maxErrorRate","minLength","minQuality","searchLength","e","preventDefault","target","value","setState","which","newVal","_this2","_this$state","polished","polish","toConsumableArray","Array","onChange","changeTextbox","type","changeOption","onClick","changeStep","dataSet","nucls","nI","Polish_Nucl","Component","Title","h4","App_templateObject","Desc","p","App_templateObject2","App","className","src_Polish","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.386ed815.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport defaultState from './defaultState'\nimport styled from 'styled-components'\nimport polish from 'polishgenomejs'\n\nconst Section = styled.section`\n  width: 100%;\n`\n\nconst Button = styled.button`\n  background-color: darkslategray;\n  color: white;\n  border: 0.5px solid rgba(255, 255, 255, ${props => props.selected ? 1 : 0});\n  font-size: 0.8em;\n  margin: 15px;\n  padding: 0.3em;\n  &:hover {\n    border-color: rgba(255, 255, 255, 1);\n  }\n`\n\nconst Input = styled.input`\n  width: 4em;\n  background-color: darkslategray;\n  font-size: 0.6em;\n  border: none;\n  padding: 0.3em;\n  margin: 0 1em;\n  color: white;\n  border-bottom: 0.5px solid white;\n`\n\nconst InputText = styled.span`\n  font-size: 0.6em;\n`\n\nconst TextBox = styled.textarea`\n  width: 100%;\n  min-height: 4em;\n  font-family: monospace;\n`\nconst SeqWrap = styled.div`\n  width: 100%;\n  border: 1px gray solid;\n  border-radius: 3px;\n  font-size: 0.8em;\n`\n\nconst NuclWrap = styled.div`\n  \n`\n\nconst NuclItem = styled.div`\n  min-width: 1.5em;\n  min-height: 1.5em;\n  ${props => props.children === null ? 'background-color: darkslategray;' : ''}\n`\n\nconst Nucls = styled.div`\n  display: inline-block;\n  margin: 1em 0;\n  vertical-align: top;\n  &:hover {\n    background-color: gray;\n  }\n`\n\nconst Nucl = props => {\n  const { data } = props\n  return <NuclWrap >\n    {data && data.map((x, i) => <NuclItem key={i}>{x}</NuclItem>)}\n  </NuclWrap>\n}\n\nclass Polish extends Component{\n  constructor(props) {\n    super()\n    this.state = {\n      data: defaultState,\n      step: 100,\n      maxErrorRate: 0.2,\n      minLength: 20,\n      minQuality: 1,\n      searchLength: 6,\n    }\n  }\n  changeTextbox(i, e) {\n    e.preventDefault()\n    let { data } = this.state\n    data[i] = e.target.value\n    this.setState({\n      data,\n    })\n  }\n  changeStep(e, step) {\n    this.setState({\n      step: step,\n    })\n  }\n  changeOption(e, which) {\n    e.preventDefault()\n    const newVal = e.target.value\n    if (which === 'minLength') this.setState({ minLength: newVal })\n    else if (which === 'minQuality') this.setState({ minQuality: newVal })\n    else if (which === 'maxErrorRate') this.setState({ maxErrorRate: newVal })\n    else if (which === 'searchLength' && newVal > 0) this.setState({ searchLength: newVal })\n  }\n  render() {\n    const { data, step, minLength, minQuality, maxErrorRate, searchLength } = this.state\n    const polished = polish(data, { minLength, minQuality, maxErrorRate, searchLength }, step)\n    return <Section>\n      <div>\n        {[...new Array(4)].map((x,i) => <TextBox key={i} value={data[i]} onChange={e => this.changeTextbox(i, e)} />)}\n      </div>\n      <div>\n        <InputText>Min. Length</InputText>\n        <Input type='number' onChange={e => this.changeOption(e, 'minLength')} value={minLength} />\n        <InputText>Min. Seq. Quality</InputText>\n        <Input type='number' onChange={e => this.changeOption(e, 'minQuality')} value={minQuality} />\n        <InputText>Max Error Rate</InputText>\n        <Input type='number' onChange={e => this.changeOption(e, 'maxErrorRate')} value={maxErrorRate} />\n        <InputText>Search Length</InputText>\n        <Input type='number' onChange={e => this.changeOption(e, 'searchLength')} value={searchLength} />\n      </div>\n      <div>\n        <Button selected={step === 0} onClick={e => this.changeStep(e, 0)}>1.Clean By Length</Button>\n        <Button selected={step === 1} onClick={e => this.changeStep(e, 1)}>2.Clean By Quality</Button>\n        <Button selected={step === 2} onClick={e => this.changeStep(e, 2)}>3.Align</Button>\n        <Button selected={step === 100} onClick={e => this.changeStep(e, 100)}>4.Consensus</Button>\n      </div>\n      <div>\n        {polished && polished.map((dataSet, i) => (\n          <SeqWrap key={i}>\n            {dataSet && dataSet.map((nucls, nI) => (\n              <Nucls key={nI} >\n                <Nucl key={i} data={nucls} />\n              </Nucls>\n            ))}\n          </SeqWrap>\n        ))}\n      </div>\n    </Section>\n  }\n}\n\nexport default Polish","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport './App.css'\nimport Polish from './Polish'\n\nconst Title = styled.h4`\n  margin: 3px;\n`\n\nconst Desc = styled.p`\n  font-size: 0.5em;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Title>PolishGenomeJS</Title>\n          <Desc>\n            A prototype genome polisher written in JavaScript.\n            This does only simple string-based matching and is not intended for lab use.\n            This accomodates only 1 nucleotide error at a time.\n          </Desc>\n          <Polish />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}